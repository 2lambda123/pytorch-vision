name: CMake

on:
  pull_request:
  push:
    branches:
      - nightly
      - main
      - release/*
  workflow_dispatch:

jobs:
  windows:
    strategy:
      matrix:
        include:
          - runner: windows.4xlarge
            gpu-arch-type: cpu
          - runner: windows.g5.4xlarge.nvidia.gpu
            gpu-arch-type: cuda
            gpu-arch-version: "11.7"
      fail-fast: false
    uses: pytorch/test-infra/.github/workflows/windows_job.yml@main
    with:
      repository: pytorch/vision
      runner: ${{ matrix.runner }}
      gpu-arch-type: ${{ matrix.gpu-arch-type }}
      gpu-arch-version: ${{ matrix.gpu-arch-version }}
      script: |
        set -ex
        source /c/Jenkins/Miniconda3/etc/profile.d/conda.sh
        source packaging/windows/internal/vc_install_helper.sh

        if [[ ${{ matrix.gpu-arch-type }} == cuda ]]; then
          export CU_VERSION=cu$(echo ${{ matrix.gpu-arch-version }} | sed 's/\.//')
          echo CU_VERSION="${CU_VERSION}"
          export CUDA_VERSION=${{ matrix.gpu-arch-version }}

          packaging/windows/internal/cuda_install.bat

          #export CUDA_HOME="/c/Program Files/NVIDIA GPU Computing Toolkit/CUDA/v${{ matrix.gpu-arch-version }}"
          #export CUDA_PATH="${CUDA_HOME}"
          #export PATH="C\:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v11.7\\bin:${PATH}"
          #export NVTOOLSEXT_PATH="/c/Program Files/NVIDIA Corporation/NvToolsExt/bin/x64"


        fi

        export PYTHON_VERSION=3.9
        export GPU_ARCH_TYPE=${{ matrix.gpu-arch-type }}
        export GPU_ARCH_VERSION=${{ matrix.gpu-arch-version }}
        export PYTORCH_VERSION=2.1.0.dev20230518
        export PYTORCH_VERSION_SUFFIX=""
        export CONDA_CHANNEL_FLAGS=""
        export UPLOAD_CHANNEL="nightly"


        conda activate
        conda update -y conda
        conda create -yn python39 python=3.9
        conda activate python39
        source ./packaging/build_cmake.sh

        # ./.github/scripts/cmake.sh
